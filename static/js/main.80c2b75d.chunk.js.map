{"version":3,"sources":["components/BurgerCard/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["BurgerCard","props","react_default","a","createElement","className","onClick","handleIncrement","id","alt","name","src","image","Header","style","height","children","message","score","shuffle","require","App","state","burgers","clicked","correctScore","_this","console","log","includes","setState","push","_this2","this","components_Header","map","burger","components_BurgerCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8jFAgBeA,MAbf,SAAoBC,GAElB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,QAAS,WACrCL,EAAMM,gBAAgBN,EAAMO,MAC7BN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCiB1BC,MAdf,SAAgBZ,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDAAiDS,MAAQ,CAACC,OAAQ,MAC/Eb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMe,UAClCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeJ,EAAMgB,SACpCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UAAoCJ,EAAMiB,MAA1C,SCNJC,EAAUC,EAAQ,IAuDPC,6MAlDbC,MAAQ,CACNC,UACAC,QAAS,GACTC,aAAc,EACdR,QAAS,MAGXV,gBAAkB,SAAAC,GAChBW,EAAQO,EAAKJ,MAAMC,SACnBI,QAAQC,IAAIpB,GACRkB,EAAKJ,MAAME,QAAQK,SAASrB,GAC9BkB,EAAKI,SAAS,CAACL,aAAc,EAAGD,QAAS,GAAIP,QAAS,8BAIjB,KAA5BS,EAAKJ,MAAMG,aACpBC,EAAKI,SAAS,CAACL,aAAc,EAAGD,QAAS,GAAIP,QAAS,cAItDS,EAAKJ,MAAME,QAAQO,KAAKvB,GAGxBkB,EAAKI,SAAS,CAAEL,aAAcC,EAAKJ,MAAMG,aAAe,EAAGR,QAAS,gGAI/D,IAAAe,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC8B,EAAD,CAAQhB,MAAOe,KAAKX,MAAMG,aAAcR,QAASgB,KAAKX,MAAML,SAA5D,eAEAf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEZ4B,KAAKX,MAAMC,QAAQY,IAAI,SAAAC,GAAM,OAC5BlC,EAAAC,EAAAC,cAACiC,EAAD,CAEE9B,gBAAiByB,EAAKzB,gBACtBC,GAAI4B,EAAO5B,GACX8B,IAAKF,EAAO5B,GACZE,KAAM0B,EAAO1B,KACbE,MAAOwB,EAAOxB,mBA5CV2B,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80c2b75d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction BurgerCard(props) {\r\n\r\n  return (\r\n    <div className=\"card\" >\r\n      <div className=\"img-container\" onClick={() => \r\n        {props.handleIncrement(props.id)}} >\r\n        <img alt={props.name} src={props.image}/>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BurgerCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// const Header = props => (\r\n//   <div className=\"header\">\r\n//     <div className=\"title\">{props.children}</div>\r\n//     <div className=\"scores\">\r\n//       Score: {props.score} Highscore: {props.highscore}\r\n//     </div>\r\n//   </div>\r\n// );\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-warning\" style ={{height: 100}}>\r\n      <div className=\"header\">\r\n        <div className=\"row\">\r\n        <div className=\"col title\">{props.children}</div>\r\n        <div className=\"col message\">{props.message}</div>\r\n        <div className=\"col scores\">Score: {props.score} </div>\r\n        </div>\r\n</div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport burgers from \"./burgers.json\";\nimport BurgerCard from \"./components/BurgerCard\";\nimport Header from \"./components/Header\";\n\n//TODO: \n// navbar\n//    li: [title, click], [you guessed in/correct], [score/high score]\n// header with brief instructions\n// pictures area\n// bottom div\n// footer\nvar shuffle = require(\"shuffle-array\")\n\nclass App extends Component {\n\n  //Set this.state.food to json array\n  state = {\n    burgers,\n    clicked: [],\n    correctScore: 0,\n    message: \"\"\n  };\n\n  handleIncrement = id => {\n    shuffle(this.state.burgers)\n    console.log(id)\n    if (this.state.clicked.includes(id)) {\n      this.setState({correctScore: 0, clicked: [], message: \"Aw, game over. Try again.\"})\n      // console.log(\"me??\", id)\n      // console.log(\"oh no!\")\n      // alert(\"Try again!\")\n    } else if (this.state.correctScore === 11) {\n      this.setState({correctScore: 0, clicked: [], message: \"You won!\"})\n      // alert(\"You Win\")\n    }\n    else {\n      this.state.clicked.push(id)\n      // console.log(\"id\")\n      // console.log(id)\n      this.setState({ correctScore: this.state.correctScore + 1, message: \"Yeah! Keep going!\"})\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Header score={this.state.correctScore} message={this.state.message}>Clicky Game</Header>\n        {/* <div className=\"container\"> */}\n        <div className=\"container\">\n          {/* This goes through the array and displays the info in burger card */}\n          {this.state.burgers.map(burger => (\n            <BurgerCard\n              // selectBurger={this.selectBurger}\n              handleIncrement={this.handleIncrement}\n              id={burger.id}\n              key={burger.id}\n              name={burger.name}\n              image={burger.image}\n            />))}\n          {/* </div> */}\n        </div>\n      </div>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}